version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: fastfluence
      POSTGRES_USER: fastfluence
      POSTGRES_PASSWORD: fastfluence
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  backend:
    build: ./backend
    environment:
      DATABASE_URL: postgresql://fastfluence:fastfluence@postgres:5432/fastfluence
      SECRET_KEY: your-secret-key-change-in-production
      FRONTEND_URL: http://localhost:5173

      # Auth0 Configuration
      AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      AUTH0_API_AUDIENCE: ${AUTH0_API_AUDIENCE}
      AUTH0_CALLBACK_URL: ${AUTH0_CALLBACK_URL}

      # SendGrid Configuration (recommended)
      USE_SENDGRID_API: "true"
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      SMTP_FROM_EMAIL: noreply@fastfluence.pl

      # Alternative SMTP Configuration (Gmail example)
      # USE_SENDGRID_API: "false"
      # SMTP_HOST: smtp.gmail.com
      # SMTP_PORT: 587
      # SMTP_USERNAME: your-email@gmail.com
      # SMTP_PASSWORD: your-app-password
      # SMTP_FROM_EMAIL: noreply@fastfluence.pl

      # SendGrid SMTP (alternative to API)
      # USE_SENDGRID_API: "false"
      # SMTP_HOST: smtp.sendgrid.net
      # SMTP_PORT: 587
      # SMTP_USERNAME: apikey
      # SMTP_PASSWORD: ${SENDGRID_API_KEY}
      # SMTP_FROM_EMAIL: noreply@fastfluence.pl

    depends_on:
      - postgres
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      VITE_API_BASE_URL: http://localhost:8000
      VITE_AUTH0_DOMAIN: ${AUTH0_DOMAIN}
      VITE_AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      VITE_AUTH0_AUDIENCE: ${AUTH0_API_AUDIENCE}
      VITE_AUTH0_CALLBACK_URL: ${AUTH0_CALLBACK_URL}
    command: npm run dev -- --host 0.0.0.0

  caddy:
    build:
      context: .
      dockerfile: Dockerfile.caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  caddy_data:
  caddy_config: